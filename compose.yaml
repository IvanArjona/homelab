x-env: &env
  PUID: ${PUID}
  GUID: ${GUID}
  TZ: ${TZ}

x-base: &base
  restart: unless-stopped
  environment: *env
  user: ${PUID}:${GUID}
  dns:
    - ${PIHOLE_IP}
  networks:
    homelab:

x-volumes:
  media: &media /data/media:/data/media
  tv: &tv /data/media/tv:/data/media/tv
  movies: &movies /data/media/movies:/data/media/movies
  torrents: &torrents /data/torrents:/data/torrents

services:
  dockerproxy:
    <<: *base
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    user: root
    environment:
      <<: *env
      CONTAINERS: 1 # Allow access to viewing containers
      IMAGES: 1 # Pull and inspect images
      POST: 1 # Allow POST (start, stop, update containers/images)
      DELETE: 1 # Allow removing old containers/images
      INFO: 1 # Allow access to Docker info
    ports:
      - 127.0.0.1:2375:2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - homepage.group=Network
      - homepage.name=Docker Proxy
      - homepage.icon=docker.png
      - homepage.description=Docker socket proxy for Traefik

  traefik:
    <<: *base
    image: traefik:v3
    container_name: traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.endpoint=tcp://dockerproxy:2375
      - --entryPoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entryPoints.websecure.address=:443
      - --certificatesresolvers.resolver.acme.dnschallenge=true
      - --certificatesresolvers.resolver.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.resolver.acme.email=postmaster@${DOMAIN}
      - --certificatesresolvers.resolver.acme.storage=/letsencrypt/acme.json
    environment:
      <<: *env
      CF_DNS_API_TOKEN: ${CLOUDFLARE_DNS_API_TOKEN}
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./letsencrypt:/letsencrypt
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.traefik.entrypoints=web,websecure
      - traefik.http.routers.traefik.tls.certresolver=resolver
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - homepage.group=Network
      - homepage.name=Traefik
      - homepage.icon=traefik.png
      - homepage.href=https://traefik.${DOMAIN}
      - homepage.description=Reverse proxy
      - homepage.widget.type=traefik
      - homepage.widget.url=http://traefik:8080

  cloudflareddns:
    <<: *base
    image: favonia/cloudflare-ddns:latest
    container_name: cloudflareddns
    read_only: true
    cap_drop: [all]
    security_opt: [no-new-privileges:true]
    environment:
      <<: *env
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_DNS_API_TOKEN}
      DOMAINS: ${PUBLIC_DOMAIN}
      PROXIED: false
    labels:
      - homepage.group=Network
      - homepage.name=Cloudflare DDNS
      - homepage.icon=cloudflare.png
      - homepage.description=Dynamic DNS updater for Cloudflare

  watchtower:
    <<: *base
    image: containrrr/watchtower:latest
    container_name: watchtower
    user: ${PUID}:${DOCKER_GUID}
    environment:
      <<: *env
      WATCHTOWER_POLL_INTERVAL: 10800
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_TIMEOUT: 30s
      WATCHTOWER_NO_STARTUP_MESSAGE: true
      WATCHTOWER_NOTIFICATION_URL: ${WATCHTOWER_NOTIFICATION_URL}
      WATCHTOWER_HTTP_API_TOKEN: ${WATCHTOWER_API_TOKEN}
      WATCHTOWER_HTTP_API_METRICS: true
      DOCKER_HOST: tcp://dockerproxy:2375
    labels:
      - homepage.group=Network
      - homepage.name=Watchtower
      - homepage.icon=watchtower.png
      - homepage.description=Automatic Docker container updater
      - homepage.widget.type=watchtower
      - homepage.widget.url=http://watchtower:8080
      - homepage.widget.key=${WATCHTOWER_API_TOKEN}

  homepage:
    <<: *base
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    volumes:
      - ./homepage:/app/config
    environment:
      HOMEPAGE_ALLOWED_HOSTS: ${DOMAIN}
    labels:
      - traefik.enable=true
      - traefik.http.routers.homepage.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.homepage.entrypoints=web,websecure
      - traefik.http.routers.homepage.tls.certresolver=resolver
      - traefik.http.services.homepage.loadbalancer.server.port=3000

  warp:
    <<: *base
    image: caomingjun/warp:latest
    container_name: warp
    device_cgroup_rules:
      - 'c 10:200 rwm'
    cap_add:
      - MKNOD
      - AUDIT_WRITE
      - NET_ADMIN
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv4.conf.all.src_valid_mark=1
    volumes:
      - ./warp:/etc/warp
    labels:
      - homepage.group=Network
      - homepage.name=Cloudflare WARP
      - homepage.icon=cloudflare.png
      - homepage.description=Cloudflare WARP client

  pihole:
    <<: *base
    container_name: pihole
    image: pihole/pihole:latest
    user: root
    ports:
      - 53:53/tcp
      - 53:53/udp
    environment:
      <<: *env
      FTLCONF_webserver_api_password: ${PIHOLE_PASSWORD}
      FTLCONF_dns_listeningMode: all
      FTLCONF_dns_upstreams: 1.1.1.1;1.0.0.1
      PIHOLE_UID: ${PUID}
      PIHOLE_GID: ${GUID}
    volumes:
      - ./pihole:/etc/pihole
    cap_add:
    - NET_ADMIN
    - SYS_TIME
    - SYS_NICE
    dns:
      - 1.1.1.1
      - 1.0.0.1
    networks:
      homelab:
        ipv4_address: ${PIHOLE_IP}
    labels:
      - traefik.enable=true
      - traefik.http.routers.pihole.rule=Host(`pihole.${DOMAIN}`)
      - traefik.http.routers.pihole.entrypoints=web,websecure
      - traefik.http.routers.pihole.tls.certresolver=resolver
      - traefik.http.services.pihole.loadbalancer.server.port=80
      - homepage.group=Network
      - homepage.name=Pi-hole
      - homepage.icon=pi-hole.png
      - homepage.href=https://pihole.${DOMAIN}/admin/
      - homepage.description=DNS server
      - homepage.widget.type=pihole
      - homepage.widget.url=http://pihole
      - homepage.widget.key=${PIHOLE_PASSWORD}
      - homepage.widget.version=6

  wireguard:
    <<: *base
    image: ghcr.io/wg-easy/wg-easy:15
    container_name: wireguard
    user: root
    environment:
      <<: *env
      INIT_ENABLED: true
      INIT_HOST: ${PUBLIC_DOMAIN}
      INIT_PORT: 51820
      INIT_USERNAME: ${WIREGUARD_USER}
      INIT_PASSWORD: ${WIREGUARD_PASSWORD}
      INIT_DNS: ${PIHOLE_IP}
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
    ports:
      - 51820:51820/udp
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv6.conf.all.forwarding=1
      - net.ipv6.conf.default.forwarding=1
    volumes:
      - ./wireguard:/etc/wireguard
      - /lib/modules:/lib/modules:ro
    dns:
      - ${PIHOLE_IP}
    labels:
      - traefik.enable=true
      - traefik.http.routers.wireguard.rule=Host(`wireguard.${DOMAIN}`)
      - traefik.http.routers.wireguard.entrypoints=web,websecure
      - traefik.http.routers.wireguard.tls.certresolver=resolver
      - traefik.http.services.wireguard.loadbalancer.server.port=51821
      - homepage.group=Network
      - homepage.name=WireGuard
      - homepage.icon=wireguard.png
      - homepage.href=https://wireguard.${DOMAIN}
      - homepage.description=VPN server
      - homepage.widget.type=wgeasy
      - homepage.widget.url=http://wireguard:51821
      - homepage.widget.version=2
      - homepage.widget.username=${WIREGUARD_USER}
      - homepage.widget.password=${WIREGUARD_PASSWORD}

  jellyfin:
    <<: *base
    container_name: jellyfin
    image: jellyfin/jellyfin:latest
    user: "${PUID}:${RENDER_GUID}"
    environment:
      <<: *env
      JELLYFIN_PublishedServerUrl: https://jellyfin.${DOMAIN}
    ports:
      - 7359:7359/udp
      - 1900:1900/udp
    volumes:
      - ./jellyfin:/config
      - *media
    devices:
      - /dev/dri:/dev/dri
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.rule=Host(`jellyfin.${DOMAIN}`)
      - traefik.http.routers.jellyfin.entrypoints=web,websecure
      - traefik.http.routers.jellyfin.tls.certresolver=resolver
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
      - homepage.group=Media
      - homepage.name=Jellyfin
      - homepage.icon=jellyfin.png
      - homepage.href=https://jellyfin.${DOMAIN}
      - homepage.description=Media server
      - homepage.widget.type=jellyfin
      - homepage.widget.url=http://jellyfin:8096
      - homepage.widget.key=${JELLYFIN_API_KEY}

  sonarr:
    <<: *base
    container_name: sonarr
    image: ghcr.io/linuxserver/sonarr:latest
    volumes:
      - ./sonarr:/config
      - *tv
      - *torrents
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)
      - traefik.http.routers.sonarr.entrypoints=web,websecure
      - traefik.http.routers.sonarr.tls.certresolver=resolver
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      - homepage.group=Media
      - homepage.name=Sonarr
      - homepage.icon=sonarr.png
      - homepage.href=https://sonarr.${DOMAIN}
      - homepage.description=TV series manager
      - homepage.widget.type=sonarr
      - homepage.widget.url=http://sonarr:8989
      - homepage.widget.key=${SONARR_API_KEY}

  radarr:
    <<: *base
    container_name: radarr
    image: ghcr.io/linuxserver/radarr:latest
    volumes:
      - ./radarr:/config
      - *movies
      - *torrents
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)
      - traefik.http.routers.radarr.entrypoints=web,websecure
      - traefik.http.routers.radarr.tls.certresolver=resolver
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      - homepage.group=Media
      - homepage.name=Radarr
      - homepage.icon=radarr.png
      - homepage.href=https://radarr.${DOMAIN}
      - homepage.description=Movie manager
      - homepage.widget.type=radarr
      - homepage.widget.url=http://radarr:7878
      - homepage.widget.key=${RADARR_API_KEY}

  bazarr:
    <<: *base
    container_name: bazarr
    image: ghcr.io/linuxserver/bazarr:latest
    volumes:
      - ./bazarr:/config
      - *media
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr.rule=Host(`bazarr.${DOMAIN}`)
      - traefik.http.routers.bazarr.entrypoints=web,websecure
      - traefik.http.routers.bazarr.tls.certresolver=resolver
      - traefik.http.services.bazarr.loadbalancer.server.port=6767
      - homepage.group=Download
      - homepage.name=Bazarr
      - homepage.icon=bazarr.png
      - homepage.href=https://bazarr.${DOMAIN}
      - homepage.description=Subtitle manager
      - homepage.widget.type=bazarr
      - homepage.widget.url=http://bazarr:6767
      - homepage.widget.key=${BAZARR_API_KEY}

  huntarr:
    <<: *base
    container_name: huntarr
    image: huntarr/huntarr:latest
    volumes:
      - ./huntarr:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.huntarr.rule=Host(`huntarr.${DOMAIN}`)
      - traefik.http.routers.huntarr.entrypoints=web,websecure
      - traefik.http.routers.huntarr.tls.certresolver=resolver
      - traefik.http.services.huntarr.loadbalancer.server.port=9705
      - homepage.group=Download
      - homepage.name=Huntarr
      - homepage.icon=huntarr.png
      - homepage.href=https://huntarr.${DOMAIN}
      - homepage.description=Find Missing & Upgrade Media Items

  cleanuparr:
    <<: *base
    container_name: cleanuparr
    image: ghcr.io/cleanuparr/cleanuparr:latest
    user: root
    volumes:
      - ./cleanuparr:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.cleanuparr.rule=Host(`cleanuparr.${DOMAIN}`)
      - traefik.http.routers.cleanuparr.entrypoints=web,websecure
      - traefik.http.routers.cleanuparr.tls.certresolver=resolver
      - traefik.http.services.cleanuparr.loadbalancer.server.port=11011
      - homepage.group=Download
      - homepage.name=Cleanuparr
      - homepage.icon=cleanuperr.png
      - homepage.href=https://cleanuparr.${DOMAIN}
      - homepage.description=Media cleanup tool

  jellyseerr:
    <<: *base
    container_name: jellyseerr
    image: fallenbagel/jellyseerr:latest
    volumes:
      - ./jellyseerr:/app/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyseerr.rule=Host(`jellyseerr.${DOMAIN}`)
      - traefik.http.routers.jellyseerr.entrypoints=web,websecure
      - traefik.http.routers.jellyseerr.tls.certresolver=resolver
      - traefik.http.services.jellyseerr.loadbalancer.server.port=5055
      - homepage.group=Download
      - homepage.name=Jellyseerr
      - homepage.icon=jellyseerr.png
      - homepage.href=https://jellyseerr.${DOMAIN}
      - homepage.description=Media request management
      - homepage.widget.type=jellyseerr
      - homepage.widget.url=http://jellyseerr:5055
      - homepage.widget.key=${JELLYSEERR_API_KEY}

  jackett:
    <<: *base
    container_name: jackett
    image: ghcr.io/linuxserver/jackett:latest
    volumes:
      - ./jackett:/config
      - *torrents
    labels:
      - traefik.enable=true
      - traefik.http.routers.jackett.rule=Host(`jackett.${DOMAIN}`)
      - traefik.http.routers.jackett.entrypoints=web,websecure
      - traefik.http.routers.jackett.tls.certresolver=resolver
      - traefik.http.services.jackett.loadbalancer.server.port=9117
      - homepage.group=Download
      - homepage.name=Jackett
      - homepage.icon=jackett.png
      - homepage.href=https://jackett.${DOMAIN}
      - homepage.description=Torrent indexer aggregator
      - homepage.widget.type=jackett
      - homepage.widget.url=http://jackett:9117
      - homepage.widget.password=${JACKETT_PASSWORD}

  flaresolverr:
    <<: *base
    container_name: flaresolverr
    image: ghcr.io/flaresolverr/flaresolverr:latest
    labels:
      - traefik.enable=true
      - traefik.http.routers.flaresolverr.rule=Host(`flaresolverr.${DOMAIN}`)
      - traefik.http.routers.flaresolverr.entrypoints=web,websecure
      - traefik.http.routers.flaresolverr.tls.certresolver=resolver
      - traefik.http.services.flaresolverr.loadbalancer.server.port=8191
      - homepage.group=Download
      - homepage.name=FlareSolverr
      - homepage.icon=flaresolverr.png
      - homepage.href=https://flaresolverr.${DOMAIN}
      - homepage.description=Bypass Cloudflare protection

  qbittorrent:
    <<: *base
    container_name: qbittorrent
    image: ghcr.io/linuxserver/qbittorrent:latest
    ports:
      - 6881:6881/tcp
      - 6881:6881/udp
    volumes:
      - ./qbittorrent:/config
      - *torrents
      - *media
    labels:
      - traefik.enable=true
      - traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.${DOMAIN}`)
      - traefik.http.routers.qbittorrent.entrypoints=web,websecure
      - traefik.http.routers.qbittorrent.tls.certresolver=resolver
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8080
      - homepage.group=Download
      - homepage.name=qBittorrent
      - homepage.icon=qbittorrent.png
      - homepage.href=https://qbittorrent.${DOMAIN}
      - homepage.description=BitTorrent client
      - homepage.widget.type=qbittorrent
      - homepage.widget.url=http://qbittorrent:8080
      - homepage.widget.username=${QBITTORRENT_USERNAME}
      - homepage.widget.password=${QBITTORRENT_PASSWORD}

  browserless:
    <<: *base
    container_name: browserless
    image: ghcr.io/browserless/chromium:latest
    user: root
    shm_size: 2gb
    environment:
      <<: *env
      TOKEN: ${BROWSERLESS_CHROMIUM_TOKEN}
      TIMEOUT: 60000
      CORS: true
      CONCURRENT: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.browserless.rule=Host(`browserless.${DOMAIN}`)
      - traefik.http.routers.browserless.entrypoints=web,websecure
      - traefik.http.routers.browserless.tls.certresolver=resolver
      - traefik.http.services.browserless.loadbalancer.server.port=3000
      - homepage.group=Automation
      - homepage.name=Browserless Chromium
      - homepage.icon=chromium.png
      - homepage.description=Headless browser service

  changedetection:
    <<: *base
    container_name: changedetection
    image: ghcr.io/dgtlmoon/changedetection.io:latest
    environment:
      <<: *env
      BASE_URL: https://changedetection.${DOMAIN}
      DISABLE_VERSION_CHECK: true
      PLAYWRIGHT_DRIVER_URL: ${PLAYWRIGHT_DRIVER_URL}
    volumes:
      - ./changedetection/config:/config
      - ./changedetection/datastore:/datastore
    depends_on:
      browserless:
        condition: service_started
    labels:
      - traefik.enable=true
      - traefik.http.routers.changedetection.rule=Host(`changedetection.${DOMAIN}`)
      - traefik.http.routers.changedetection.entrypoints=web,websecure
      - traefik.http.routers.changedetection.tls.certresolver=resolver
      - traefik.http.services.changedetection.loadbalancer.server.port=5000
      - homepage.group=Automation
      - homepage.name=ChangeDetection
      - homepage.icon=changedetection.png
      - homepage.href=https://changedetection.${DOMAIN}
      - homepage.description=Website change detection
      - homepage.widget.type=changedetectionio
      - homepage.widget.url=http://changedetection:5000
      - homepage.widget.key=${CHANGEDETECTION_API_KEY}

  samba:
    <<: *base
    container_name: samba
    image: dperson/samba:latest
    user: root
    ports:
      - 137:137/udp
      - 138:138/udp
      - 139:139/tcp
      - 445:445/tcp
    environment:
      <<: *env
      USERID: ${PUID}
      GROUPID: ${GUID}
    volumes:
      - /data:/data:z
      - .:/home:z
    tmpfs:
      - /tmp
    command: '-s "data;/data;;no" -s "home;/home;;no" -u "${SAMBA_USER};${SAMBA_PASSWORD}" -p -n -r'
    labels:
      - homepage.group=Network
      - homepage.name=Samba
      - homepage.icon=samba-server.png
      - homepage.description=File sharing service

  chrome:
    <<: *base
    container_name: chrome
    image: gcr.io/zenika-hub/alpine-chrome:latest
    command:
      - --no-sandbox
      - --disable-gpu
      - --disable-dev-shm-usage
      - --remote-debugging-address=0.0.0.0
      - --remote-debugging-port=9222
      - --hide-scrollbars
    labels:
      - traefik.enable=true
      - traefik.http.routers.chrome.rule=Host(`chrome.${DOMAIN}`)
      - traefik.http.routers.chrome.entrypoints=web,websecure
      - traefik.http.routers.chrome.tls.certresolver=resolver
      - traefik.http.services.chrome.loadbalancer.server.port=9222
      - homepage.group=Automation
      - homepage.name=Chrome
      - homepage.icon=chrome.png
      - homepage.href=https://chrome.${DOMAIN}
      - homepage.description=Headless Chrome browser for karakeep

  meilisearch:
    <<: *base
    container_name: meilisearch
    image: getmeili/meilisearch:latest
    environment:
      <<: *env
      MEILI_NO_ANALYTICS: true
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}
    volumes:
      - ./meilisearch:/meili_data
    labels:
      - homepage.group=Automation
      - homepage.name=Meilisearch
      - homepage.icon=meilisearch.png
      - homepage.description=Search engine for karakeep

  karakeep:
    <<: *base
    container_name: karakeep
    image: ghcr.io/karakeep-app/karakeep:release
    environment:
      <<: *env
      KARAKEEP_API_KEY: ${KARAKEEP_API_KEY}
      MEILI_ADDR: http://meilisearch:7700
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}
      BROWSER_WEB_URL: http://chrome:9222
      DATA_DIR: /data
      NEXTAUTH_URL: https://karakeep.${DOMAIN}
      NEXTAUTH_SECRET: ${KARAKEEP_NEXTAUTH_SECRET}
    volumes:
      - ./karakeep:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.karakeep.rule=Host(`karakeep.${DOMAIN}`)
      - traefik.http.routers.karakeep.entrypoints=web,websecure
      - traefik.http.routers.karakeep.tls.certresolver=resolver
      - traefik.http.services.karakeep.loadbalancer.server.port=3000
      - homepage.group=Automation
      - homepage.name=KaraKeep
      - homepage.icon=karakeep.png
      - homepage.href=https://karakeep.${DOMAIN}
      - homepage.description=Bookmarks manager
      - homepage.widget.type=karakeep
      - homepage.widget.url=http://karakeep:3000
      - homepage.widget.key=${KARAKEEP_API_KEY}

  n8n:
    <<: *base
    container_name: n8n
    image: docker.n8n.io/n8nio/n8n:latest
    user: node:${DOCKER_GUID}
    environment:
      <<: *env
      N8N_HOST: n8n.${DOMAIN}
      N8N_PROTOCOL: https
      N8N_RUNNERS_ENABLED: true
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: false
      WEBHOOK_URL: https://n8n.${DOMAIN}/
      GENERIC_TIMEZONE: ${TZ}
    ports:
      - 5678:5678
    volumes:
      - ./n8n:/home/node/.n8n
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`n8n.${DOMAIN}`)
      - traefik.http.routers.n8n.entrypoints=web,websecure
      - traefik.http.routers.n8n.tls.certresolver=resolver
      - traefik.http.services.n8n.loadbalancer.server.port=5678
      - homepage.group=Automation
      - homepage.name=n8n
      - homepage.icon=n8n.png
      - homepage.href=https://n8n.${DOMAIN}
      - homepage.description=Workflow automation tool

  influxdb:
    <<: *base
    container_name: influxdb
    image: influxdb:latest
    volumes:
      - ./influxdb:/var/lib/influxdb2
    labels:
      - traefik.enable=true
      - traefik.http.routers.influxdb.rule=Host(`influxdb.${DOMAIN}`)
      - traefik.http.routers.influxdb.entrypoints=web,websecure
      - traefik.http.routers.influxdb.tls.certresolver=resolver
      - traefik.http.services.influxdb.loadbalancer.server.port=8086
      - homepage.group=Monitoring
      - homepage.name=influxdb
      - homepage.icon=influxdb.png
      - homepage.href=https://influxdb.${DOMAIN}
      - homepage.description=Time series database

  telegraf:
    <<: *base
    container_name: telegraf
    image: telegraf:latest
    user: telegraf:${DOCKER_GUID}
    environment:
      <<: *env
      INFLUXDB_ORGANIZATION: ${INFLUXDB_ORGANIZATION}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_API_TOKEN: ${INFLUXDB_API_TOKEN}
    volumes:
        - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    labels:
      - homepage.group=Monitoring
      - homepage.name=Telegraf
      - homepage.icon=telegraf.png
      - homepage.description=Metrics collector

  grafana:
    <<: *base
    container_name: grafana
    image: grafana/grafana:latest
    environment:
      <<: *env
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - ./grafana:/var/lib/grafana
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)
      - traefik.http.routers.grafana.entrypoints=web,websecure
      - traefik.http.routers.grafana.tls.certresolver=resolver
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - homepage.group=Monitoring
      - homepage.name=Grafana
      - homepage.icon=grafana.png
      - homepage.href=https://grafana.${DOMAIN}/
      - homepage.description=Visualization tool
      - homepage.widget.type=grafana
      - homepage.widget.version=2
      - homepage.widget.url=http://grafana:3000
      - homepage.widget.username=${GRAFANA_ADMIN_USER}
      - homepage.widget.password=${GRAFANA_ADMIN_PASSWORD}

networks:
  homelab:
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET}
        - subnet: fdcc:ad94:bacf:61a3::/64
    enable_ipv6: true
